const std = @import("std");
const resinator = @import("resinator");

test "empty rc" {
    try testCompileWithOutput(
        "",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
}

test "basic rcdata" {
    var tmp_dir = std.testing.tmpDir(.{});
    defer tmp_dir.cleanup();

    try tmp_dir.dir.writeFile(.{ .sub_path = "file.bin", .data = "hello world" });

    try testCompileWithOutput(
        "1 RCDATA file.bin",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00hello world\x00",
        tmp_dir.dir,
    );
    try testCompileWithOutput(
        "1 RCDATA \"file.bin\"",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00hello world\x00",
        tmp_dir.dir,
    );
    try testCompileWithOutput(
        "1 RCDATA L\"file.bin\"",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00hello world\x00",
        tmp_dir.dir,
    );
}

test "basic rcdata with empty raw data" {
    try testCompileWithOutput(
        "1 RCDATA {}",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
}

test "basic rcdata with raw data" {
    try testCompileWithOutput(
        "1 RCDATA { 1, \"2\", L\"3\" }",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x0023\x00\x00\x00\x00",
        std.fs.cwd(),
    );
}

test "basic but with tricky type" {
    var tmp_dir = std.testing.tmpDir(.{});
    defer tmp_dir.cleanup();

    try tmp_dir.dir.writeFile(.{ .sub_path = "file.bin", .data = "hello world" });

    try testCompileWithOutput(
        "1 \"RCDATA\" file.bin",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x000\x00\x00\x00\"\x00R\x00C\x00D\x00A\x00T\x00A\x00\"\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00hello world\x00",
        tmp_dir.dir,
    );
}

test "raw data with number expression" {
    try testCompileWithOutput(
        "1 RCDATA { 1+1 }",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00",
        std.fs.cwd(),
    );
    // overflow is wrapping
    try testCompileWithOutput(
        "1 RCDATA { 65535+1 }",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
    // binary operators promote to the largest size of their operands
    try testCompileWithOutput(
        "1 RCDATA { 65535 + 1L }",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00",
        std.fs.cwd(),
    );
    // grouped expression
    try testCompileWithOutput(
        "1 RCDATA { (65535 + 1L) }",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00",
        std.fs.cwd(),
    );
}

test "filenames as numeric expressions" {
    var tmp_dir = std.testing.tmpDir(.{});
    defer tmp_dir.cleanup();

    try tmp_dir.dir.writeFile(.{ .sub_path = "-1", .data = "hello world" });
    try testCompileWithOutput(
        "1 RCDATA -1",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00hello world\x00",
        tmp_dir.dir,
    );
    try tmp_dir.dir.deleteFile("-1");

    try tmp_dir.dir.writeFile(.{ .sub_path = "~1", .data = "hello world" });
    try testCompileWithOutput(
        "1 RCDATA ~1",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00hello world\x00",
        tmp_dir.dir,
    );
    try tmp_dir.dir.deleteFile("~1");

    try testCompileErrorDetailsWithDir(
        &.{
            .{ .type = .err, .str = "filename cannot be specified using a number expression, consider using a quoted string instead" },
            .{ .type = .note, .str = "the Win32 RC compiler would evaluate this number expression as the filename '1'" },
        },
        "1 RCDATA 1+1",
        null,
        tmp_dir.dir,
    );

    try testCompileErrorDetailsWithDir(
        &.{
            .{ .type = .err, .str = "filename cannot be specified using a number expression, consider using a quoted string instead" },
            .{ .type = .note, .str = "the Win32 RC compiler would evaluate this number expression as the filename '-1'" },
        },
        "1 RCDATA 1+-1",
        null,
        tmp_dir.dir,
    );

    try testCompileErrorDetailsWithDir(
        &.{
            .{ .type = .err, .str = "filename cannot be specified using a number expression, consider using a quoted string instead" },
            .{ .type = .note, .str = "the Win32 RC compiler would evaluate this number expression as the filename '-1'" },
        },
        "1 RCDATA (1+-1)",
        null,
        tmp_dir.dir,
    );
}

test "filename that refers to a directory" {
    var tmp_dir = std.testing.tmpDir(.{});
    defer tmp_dir.cleanup();

    try tmp_dir.dir.makeDir("dir");
    try testCompileErrorDetailsWithDir(
        &.{
            .{ .type = .err, .str = "unable to open file 'dir': IsDir" },
        },
        "1 RCDATA dir",
        null,
        tmp_dir.dir,
    );
}

test "NameOrOrdinal" {
    // overflow *is* allowed for both id and type
    try testCompileWithOutput(
        "65635 65635 {}",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xff\xffc\x00\xff\xffc\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
}

test "case of string ids and user-defined types" {
    // All ASCII chars should be converted to uppercase
    try testCompileWithOutput(
        "lower lower {}",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000\x00\x00\x00L\x00O\x00W\x00E\x00R\x00\x00\x00L\x00O\x00W\x00E\x00R\x00\x00\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
}

test "basic icons" {
    var tmp_dir = std.testing.tmpDir(.{});
    defer tmp_dir.cleanup();

    // This is a well-formed .ico with a 1x1 bmp icon
    // The reserved byte in the RESDIR is non-zero to test that the value gets carried along
    try tmp_dir.dir.writeFile(.{ .sub_path = "test.ico", .data = "\x00\x00\x01\x00\x01\x00\x01\x01\x00\x77\x01\x00 \x000\x00\x00\x00\x16\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00 \x00\x00\x00\x00\x00\x04\x00\x00\x00\x12\x0b\x00\x00\x12\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00" });

    try testCompileWithOutput(
        "1 ICON test.ico",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000\x00\x00\x00 \x00\x00\x00\xff\xff\x03\x00\xff\xff\x01\x00\x00\x00\x00\x00\x10\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00 \x00\x00\x00\x00\x00\x04\x00\x00\x00\x12\x0b\x00\x00\x12\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x14\x00\x00\x00 \x00\x00\x00\xff\xff\x0e\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x01\x01\x00\x77\x01\x00 \x000\x00\x00\x00\x01\x00",
        tmp_dir.dir,
    );

    // Cursors are just .ico files with a different image type
    // The Win32 RC compiler will compile them even if the types mismatch, but the .res
    // will fail to load the CURSOR/ICON at runtime, so we error instead.
    try testCompileErrorDetailsWithDir(
        &.{.{ .type = .err, .str = "resource type 'cursor' does not match type 'icon' specified in the file" }},
        "1 CURSOR test.ico",
        null,
        tmp_dir.dir,
    );

    // Common resource attributes should be applies to the ICON but not the GROUP_ICON
    try testCompileWithOutput(
        "1 ICON FIXED test.ico",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000\x00\x00\x00 \x00\x00\x00\xff\xff\x03\x00\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00 \x00\x00\x00\x00\x00\x04\x00\x00\x00\x12\x0b\x00\x00\x12\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x14\x00\x00\x00 \x00\x00\x00\xff\xff\x0e\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x01\x01\x00\x77\x01\x00 \x000\x00\x00\x00\x01\x00",
        tmp_dir.dir,
    );

    // This is an .ico with a 1x1 bmp icon that has different bits_per_pixel values in
    // the IconDir than in the icon data's BITMAPINFOHEADER. In this case, the icon
    // data is what should be used.
    try tmp_dir.dir.writeFile(.{ .sub_path = "test_mismatched_bits_per_pixel.ico", .data = "\x00\x00\x01\x00\x01\x00\x01\x01\x10\x00\x01\x00\x04\x00.\x00\x00\x00\x16\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x10\x00\x00\x00\x00\x00\x06\x00\x00\x00\x12\x0b\x00\x00\x12\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x7f\x00\x00\x00\x00" });

    try testCompileWithOutput(
        "1 ICON test_mismatched_bits_per_pixel.ico",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00.\x00\x00\x00 \x00\x00\x00\xff\xff\x03\x00\xff\xff\x01\x00\x00\x00\x00\x00\x10\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x10\x00\x00\x00\x00\x00\x06\x00\x00\x00\x12\x0b\x00\x00\x12\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x7f\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00 \x00\x00\x00\xff\xff\x0e\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x01\x01\x10\x00\x01\x00\x10\x00.\x00\x00\x00\x01\x00",
        tmp_dir.dir,
    );
}

test "cursors" {
    var tmp_dir = std.testing.tmpDir(.{});
    defer tmp_dir.cleanup();

    // This is help.cur from the Windows SDK
    try tmp_dir.dir.writeFile(.{ .sub_path = "test.cur", .data = "\x00\x00\x02\x00\x02\x00  \x00\x00\x02\x00\x02\x000\x01\x00\x00&\x00\x00\x00\x10\x10\x00\x00\x01\x00\x01\x00\xb0\x00\x00\x00V\x01\x00\x00(\x00\x00\x00 \x00\x00\x00@\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x008\x00\x00\x000\x00\x00\x00p\x00\x00\x00`\x00\x00\x00\xe0\x00\x00\x00\xc0\x00\x00\x11\xc0\x00\x00\x19\x80\x00\x00\x1f\x80\x00\x00\x1f\xfc\x00\x00\x1f\xc0\x00\x00\x1f\xc0\x00\x00\x1f\xc0\x00\x00\x1f\xc0\x00\x00\x1f\x80\x00\x00\x1f\x00\x00\x00\x1e\x00\x00\x00\x1c\x00\x00\x00\x18\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\x07\xff\xff\xfe\x07\xff\xff\xfe\x07\xff\xff\xfe\x07\xff\xff\xfe\x07\xff\xff\x83\xff\xff\xff\x83\xff\xff\xff\x02\x07\xff\xff\x06\x07\xff\xfe\x06\x07\xff\xce\x0e\x07\xff\xc4\x0e\x07\xff\xc0\x1e\x03\xff\xc0\x1f\x01\xff\xc0\x01\x80\xff\xc0\x01\xc0\x7f\xc0\x01\xe0?\xc0\x01\xf0?\xc0\x01\xf0?\xc0\x00\xe0?\xc0\x00\x00?\xc0 \x00\x7f\xc0p\x00\xff\xc0\xf8\x01\xff\xc1\xfc\x03\xff\xc3\xff\xff\xff\xc7\xff\xff\xff\xcf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff(\x00\x00\x00\x10\x00\x00\x00 \x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\x00\x07\x80\x00\x00\x04\xf8\x00\x00\x84\xc8\x00\x00\xc9H\x00\x00\xa9x\x00\x00\x92H\x00\x00\x83\xc8\x00\x00\x80d\x00\x00\x80\xd2\x00\x00\x81)\x00\x00\x839\x00\x00\x85\x01\x00\x00\x88\x82\x00\x00\x90|\x00\x00\xa0\x00\x00\x00\xc0\x00\x00\x00\xf8\x7f\x00\x00\xf8\x07\x00\x00x\x07\x00\x000\x87\x00\x00\x10\x87\x00\x00\x01\x87\x00\x00\x00\x07\x00\x00\x00\x03\x00\x00\x00!\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x07\x01\x00\x00\x0f\x83\x00\x00\x1f\xff\x00\x00?\xff\x00\x00" });

    try testCompileWithOutput(
        "1 CURSOR test.cur",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x004\x01\x00\x00 \x00\x00\x00\xff\xff\x01\x00\xff\xff\x01\x00\x00\x00\x00\x00\x10\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x02\x00(\x00\x00\x00 \x00\x00\x00@\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x008\x00\x00\x000\x00\x00\x00p\x00\x00\x00`\x00\x00\x00\xe0\x00\x00\x00\xc0\x00\x00\x11\xc0\x00\x00\x19\x80\x00\x00\x1f\x80\x00\x00\x1f\xfc\x00\x00\x1f\xc0\x00\x00\x1f\xc0\x00\x00\x1f\xc0\x00\x00\x1f\xc0\x00\x00\x1f\x80\x00\x00\x1f\x00\x00\x00\x1e\x00\x00\x00\x1c\x00\x00\x00\x18\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\x07\xff\xff\xfe\x07\xff\xff\xfe\x07\xff\xff\xfe\x07\xff\xff\xfe\x07\xff\xff\x83\xff\xff\xff\x83\xff\xff\xff\x02\x07\xff\xff\x06\x07\xff\xfe\x06\x07\xff\xce\x0e\x07\xff\xc4\x0e\x07\xff\xc0\x1e\x03\xff\xc0\x1f\x01\xff\xc0\x01\x80\xff\xc0\x01\xc0\x7f\xc0\x01\xe0?\xc0\x01\xf0?\xc0\x01\xf0?\xc0\x00\xe0?\xc0\x00\x00?\xc0 \x00\x7f\xc0p\x00\xff\xc0\xf8\x01\xff\xc1\xfc\x03\xff\xc3\xff\xff\xff\xc7\xff\xff\xff\xcf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xb4\x00\x00\x00 \x00\x00\x00\xff\xff\x01\x00\xff\xff\x02\x00\x00\x00\x00\x00\x10\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00(\x00\x00\x00\x10\x00\x00\x00 \x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\x00\x07\x80\x00\x00\x04\xf8\x00\x00\x84\xc8\x00\x00\xc9H\x00\x00\xa9x\x00\x00\x92H\x00\x00\x83\xc8\x00\x00\x80d\x00\x00\x80\xd2\x00\x00\x81)\x00\x00\x839\x00\x00\x85\x01\x00\x00\x88\x82\x00\x00\x90|\x00\x00\xa0\x00\x00\x00\xc0\x00\x00\x00\xf8\x7f\x00\x00\xf8\x07\x00\x00x\x07\x00\x000\x87\x00\x00\x10\x87\x00\x00\x01\x87\x00\x00\x00\x07\x00\x00\x00\x03\x00\x00\x00!\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x07\x01\x00\x00\x0f\x83\x00\x00\x1f\xff\x00\x00?\xff\x00\x00\"\x00\x00\x00 \x00\x00\x00\xff\xff\x0c\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x02\x00 \x00@\x00\x01\x00\x01\x004\x01\x00\x00\x01\x00\x10\x00 \x00\x01\x00\x01\x00\xb4\x00\x00\x00\x02\x00\x00\x00",
        tmp_dir.dir,
    );
}

// This is the most basic possible animated icon that will be
// seen as an animated icon
const test_riff_data = "RIFF\x2C\x00\x00\x00ACONanih\x24\x00\x00\x00" ++ ([4]u8{ 0, 0, 0, 0 } ** 8) ++ "\x01\x00\x00\x00";
// A 1x1 png
const test_png_data = "\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x01\x00\x00\x00\x007n\xf9$\x00\x00\x00\nIDAT\x08\xd7ch\x00\x00\x00\x82\x00\x81\xddCj\xf4\x00\x00\x00\x00IEND\xaeB`\x82";
// A 1x1 DIB
const test_dib_data = "(\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x10\x00\x00\x00\x00\x00\x06\x00\x00\x00\x12\x0b\x00\x00\x12\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x7f\x00\x00\x00\x00";

test "uncommon icons/cursors" {
    var tmp_dir = std.testing.tmpDir(.{});
    defer tmp_dir.cleanup();

    {
        comptime std.debug.assert(test_riff_data.len == 0x38);

        // A basic resource group with 1 resource; type is CURSOR to start with
        var resdir_riff = "\x00\x00\x02\x00\x01\x00\x00\x00\x00\x00\x15\x00\x15\x00\x38\x00\x00\x00\x16\x00\x00\x00".*;
        try tmp_dir.dir.writeFile(.{ .sub_path = "riff_in_dir.cur", .data = resdir_riff ++ test_riff_data });
        // switch type to ICON
        resdir_riff[2] = 1;
        try tmp_dir.dir.writeFile(.{ .sub_path = "riff_in_dir.ico", .data = resdir_riff ++ test_riff_data });

        try testCompileErrorDetailsWithDir(
            &.{.{ .type = .err, .str = "resource with format 'riff' (at index 0) is not allowed in cursor resource groups" }},
            "1 CURSOR riff_in_dir.cur",
            null,
            tmp_dir.dir,
        );

        try testCompileErrorDetailsWithDir(
            &.{
                .{ .type = .warning, .str = "the resource at index 0 of this icon has the format 'riff'; this would be an error in the Win32 RC compiler" },
                .{ .type = .note, .str = "animated RIFF icons within resource groups may not be well supported, consider using an animated icon file (.ani) instead" },
            },
            "1 ICON riff_in_dir.ico",
            null,
            tmp_dir.dir,
        );
    }

    {
        // now png
        var resdir_png = "\x00\x00\x01\x00\x01\x00\x01\x01\x08\x00\x02\x00 \x00C\x00\x00\x00\x16\x00\x00\x00".*;
        try tmp_dir.dir.writeFile(.{ .sub_path = "png_in_dir.ico", .data = resdir_png ++ test_png_data });
        resdir_png[2] = 2; // cursor
        try tmp_dir.dir.writeFile(.{ .sub_path = "png_in_dir.cur", .data = resdir_png ++ test_png_data });

        try testCompileErrorDetailsWithDir(
            &.{.{ .type = .warning, .str = "the resource at index 0 of this cursor has the format 'png'; this would be an error in the Win32 RC compiler" }},
            "1 CURSOR png_in_dir.cur",
            null,
            tmp_dir.dir,
        );

        try testCompileWithOutput(
            "1 ICON png_in_dir.ico",
            "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00C\x00\x00\x00 \x00\x00\x00\xff\xff\x03\x00\xff\xff\x01\x00\x00\x00\x00\x00\x10\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x01\x00\x00\x00\x007n\xf9$\x00\x00\x00\nIDAT\x08\xd7ch\x00\x00\x00\x82\x00\x81\xddCj\xf4\x00\x00\x00\x00IEND\xaeB`\x82\x00\x14\x00\x00\x00 \x00\x00\x00\xff\xff\x0e\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x01\x01\x08\x00\x01\x00\x03\x00C\x00\x00\x00\x01\x00",
            tmp_dir.dir,
        );
    }

    {
        // now DIBs with uncommon versions
        var resdir_dib = "\x00\x00\x01\x00\x01\x00\x01\x01\x10\x00\x01\x00\x04\x00.\x00\x00\x00\x16\x00\x00\x00".* ++ test_dib_data.*;
        // set the version to win2.0 by setting the header size to 12
        resdir_dib[0x16] = 12;
        try tmp_dir.dir.writeFile(.{ .sub_path = "old_version.ico", .data = &resdir_dib });
        resdir_dib[2] = 2; // cursor
        try tmp_dir.dir.writeFile(.{ .sub_path = "old_version.cur", .data = &resdir_dib });

        try testCompileErrorDetailsWithDir(
            &.{.{ .type = .err, .str = "the DIB at index 0 of this icon is of version 'Windows 2.0 (BITMAPCOREHEADER)'; this version is no longer allowed and should be upgraded to 'Windows NT, 3.1x (BITMAPINFOHEADER)'" }},
            "1 ICON old_version.ico",
            null,
            tmp_dir.dir,
        );

        try testCompileErrorDetailsWithDir(
            &.{.{ .type = .err, .str = "the DIB at index 0 of this cursor is of version 'Windows 2.0 (BITMAPCOREHEADER)'; this version is no longer allowed and should be upgraded to 'Windows NT, 3.1x (BITMAPINFOHEADER)'" }},
            "1 CURSOR old_version.cur",
            null,
            tmp_dir.dir,
        );

        resdir_dib[0x16] = 124; // V5
        resdir_dib[2] = 1; // icon
        try tmp_dir.dir.writeFile(.{ .sub_path = "v5.ico", .data = &resdir_dib });
        resdir_dib[2] = 2; // cursor
        try tmp_dir.dir.writeFile(.{ .sub_path = "v5.cur", .data = &resdir_dib });

        try testCompileErrorDetailsWithDir(
            &.{.{ .type = .warning, .str = "the DIB at index 0 of this icon is of version 'Windows NT 5.0, 98 (BITMAPV5HEADER)'; this would be an error in the Win32 RC compiler" }},
            "1 ICON v5.ico",
            null,
            tmp_dir.dir,
        );

        try testCompileErrorDetailsWithDir(
            &.{.{ .type = .warning, .str = "the DIB at index 0 of this cursor is of version 'Windows NT 5.0, 98 (BITMAPV5HEADER)'; this would be an error in the Win32 RC compiler" }},
            "1 CURSOR v5.cur",
            null,
            tmp_dir.dir,
        );

        resdir_dib[0x16] = 77; // unknown
        resdir_dib[2] = 1; // icon
        try tmp_dir.dir.writeFile(.{ .sub_path = "unknown.ico", .data = &resdir_dib });
        resdir_dib[2] = 2; // cursor
        try tmp_dir.dir.writeFile(.{ .sub_path = "unknown.cur", .data = &resdir_dib });

        try testCompileErrorDetailsWithDir(
            &.{.{ .type = .warning, .str = "the DIB at index 0 of this icon is of version 'unknown'; this would be an error in the Win32 RC compiler" }},
            "1 ICON unknown.ico",
            null,
            tmp_dir.dir,
        );

        try testCompileErrorDetailsWithDir(
            &.{.{ .type = .warning, .str = "the DIB at index 0 of this cursor is of version 'unknown'; this would be an error in the Win32 RC compiler" }},
            "1 CURSOR unknown.cur",
            null,
            tmp_dir.dir,
        );
    }
}

test "basic bitmap" {
    var tmp_dir = std.testing.tmpDir(.{});
    defer tmp_dir.cleanup();

    // This is a well-formed .bmp with a 1x1 image
    try tmp_dir.dir.writeFile(.{ .sub_path = "test.bmp", .data = "BM<\x00\x00\x00\x00\x00\x00\x006\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x10\x00\x00\x00\x00\x00\x06\x00\x00\x00\x12\x0b\x00\x00\x12\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x7f\x00\x00\x00\x00" });

    try testCompileWithOutput(
        "1 BITMAP test.bmp",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00.\x00\x00\x00 \x00\x00\x00\xff\xff\x02\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x10\x00\x00\x00\x00\x00\x06\x00\x00\x00\x12\x0b\x00\x00\x12\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x7f\x00\x00\x00\x00\x00\x00",
        tmp_dir.dir,
    );

    try tmp_dir.dir.writeFile(.{ .sub_path = "test_extra_palette_bytes.bmp", .data = "BM<\x00\x00\x00\x00\x00\x00\x00:\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x10\x00\x00\x00\x00\x00\x06\x00\x00\x00\x12\x0b\x00\x00\x12\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x7f\x00\x00\x00\x00" });

    try testCompileErrorDetailsWithDir(
        &.{.{ .type = .warning, .str = "bitmap has 4 extra bytes preceding the pixel data which will be ignored" }},
        "1 BITMAP test_extra_palette_bytes.bmp",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00.\x00\x00\x00 \x00\x00\x00\xff\xff\x02\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x10\x00\x00\x00\x00\x00\x06\x00\x00\x00\x12\x0b\x00\x00\x12\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x7f\x00\x00\x00\x00\x00\x00",
        tmp_dir.dir,
    );

    try tmp_dir.dir.writeFile(.{ .sub_path = "test_missing_palette_bytes.bmp", .data = "BM<\x00\x00\x00\x00\x00\x00\x006\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x10\x00\x00\x00\x00\x00\x06\x00\x00\x00\x12\x0b\x00\x00\x12\x0b\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\xff\x7f\x00\x00\x00\x00" });

    // Note: The expected output here is different from what you'd get from the Win32 RC compiler,
    //       since the Win32 RC compiler miscompiles this particular case and puts the pixel
    //       data into the padding bytes of the color palette.
    try testCompileErrorDetailsWithDir(
        &.{
            .{ .type = .err, .str = "bitmap has 16 missing color palette bytes" },
            .{ .type = .note, .str = "the Win32 RC compiler would erroneously pad out the missing bytes (and the added padding bytes would include 6 bytes of the pixel data)" },
        },
        "1 BITMAP test_missing_palette_bytes.bmp",
        null,
        tmp_dir.dir,
    );

    try tmp_dir.dir.writeFile(.{ .sub_path = "test_win2.0_missing_palette_bytes.bmp", .data = "BMJX\x02\x00\x00\x00\x00\x00G\x00\x00\x00\x0c\x00\x00\x00\x80\x02\xe0\x01\x01\x00\x04\x00\x00\x00\x00\x80\x00\x00\x00\x80\x00\x80\x80\x00\x00\x00\x80\x80\x00\x80\x00\x80\x80\x80\x80\x80\xcc\xcc\xcc\xff\x00\x00\x00\xff\x00\xff\xff\x00\x00\x00\xff\xff\x00\xff\x00\xff\xff" });
    try testCompileErrorDetailsWithDir(
        &.{
            .{ .type = .err, .str = "bitmap has 3 missing color palette bytes" },
            .{ .type = .note, .str = "the Win32 RC compiler would erroneously pad out the missing bytes" },
        },
        "1 BITMAP test_win2.0_missing_palette_bytes.bmp",
        null,
        tmp_dir.dir,
    );

    try tmp_dir.dir.writeFile(.{ .sub_path = "test_too_many_colors_for_bit_depth.bmp", .data = "BM<\x00\x00\x00\x00\x00\x00\x006\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x10\x00\x00\x00\x00\x00\x06\x00\x00\x00\x12\x0b\x00\x00\x12\x0b\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\x7f\x00\x00\x00\x00" });
    try testCompileErrorDetailsWithDir(
        &.{.{ .type = .err, .str = "invalid bitmap file 'test_too_many_colors_for_bit_depth.bmp': TooManyColorsInPalette" }},
        "1 BITMAP test_too_many_colors_for_bit_depth.bmp",
        null,
        tmp_dir.dir,
    );

    try tmp_dir.dir.writeFile(.{ .sub_path = "test_too_many_missing_palette_bytes.bmp", .data = "BM<\x00\x00\x00\x00\x00\x00\x006\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x20\x00\x00\x00\x00\x00\x06\x00\x00\x00\x12\x0b\x00\x00\x12\x0b\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\x7f\x00\x00\x00\x00" });
    try testCompileErrorDetailsWithDir(
        &.{
            .{ .type = .err, .str = "bitmap has 17179869180 missing color palette bytes" },
            .{ .type = .note, .str = "the Win32 RC compiler would erroneously pad out the missing bytes (and the added padding bytes would include 6 bytes of the pixel data)" },
        },
        "1 BITMAP test_too_many_missing_palette_bytes.bmp",
        null,
        tmp_dir.dir,
    );
}

test "basic html" {
    var tmp_dir = std.testing.tmpDir(.{});
    defer tmp_dir.cleanup();

    try tmp_dir.dir.writeFile(.{ .sub_path = "test.html", .data = "hello" });
    const expected = "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00 \x00\x00\x00\xff\xff\x17\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00hello\x00\x00\x00";

    try testCompileWithOutput(
        "1 HTML { \"hello\" }",
        expected,
        tmp_dir.dir,
    );

    try testCompileWithOutput(
        "1 HTML test.html",
        expected,
        tmp_dir.dir,
    );
}

test "tab column counting" {
    // Tab column is calculated via byte count, not codepoint count.
    // If the tab column were counted in codepoints, there would be 1 space in the .res
    // but since the tab columns are counted in bytes, there are 7 spaces in the .res.
    try testCompileWithOutputAndOptions(
        "1 € { \"\t\" }",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00 \x00\x00\x00\xac \x00\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00       \x00",
        .{
            .cwd = std.fs.cwd(),
            .default_code_page = .utf8,
        },
    );
}

test "basic stringtable" {
    try testCompileWithOutput(
        "STRINGTABLE { 1, \"hello\" }",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00*\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00h\x00e\x00l\x00l\x00o\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );

    // overflow in string id, tab in string literal
    try testCompileWithOutput(
        "STRINGTABLE {    -1, \"\ta\" }",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x00\x10\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00 \x00 \x00a\x00\x00\x00",
        std.fs.cwd(),
    );

    // order of RT_STRING resources in output, multiple RT_STRING blocks
    try testCompileWithOutput(
        \\STRINGTABLE { 512, "a" }
        \\1 RCDATA {}
        \\STRINGTABLE {
        \\  0, "b"
        \\  513, "c"
        \\}
        \\
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00$\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff!\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00a\x00\x01\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\"\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );

    // The first STRINGTABLE that contains a string in a block dictates the memory flags
    // of the entire block
    try testCompileWithOutput(
        \\STRINGTABLE { 512, "a" }
        \\STRINGTABLE FIXED {
        \\  0, "b"
        \\  513, "c"
        \\}
        \\
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff!\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00a\x00\x01\x00c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\"\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x01\x00\x00\x00\x00\x00 \x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );

    // Some Windows-1252 -> UTF-16 conversion testing
    try testCompileWithOutput(
        "STRINGTABLE { 1 \"hello \x93world\x94 i guess\" }",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00J\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00h\x00e\x00l\x00l\x00o\x00 \x00\x1c w\x00o\x00r\x00l\x00d\x00\x1d  \x00i\x00 \x00g\x00u\x00e\x00s\x00s\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );

    // Invalid UTF-8 gets converted to the replacement character
    try testCompileWithOutputAndOptions(
        "STRINGTABLE { 1 \"\x80\" }",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\"\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xfd\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        .{ .cwd = std.fs.cwd(), .default_code_page = .utf8 },
    );
    // Even if the output code page is 1252
    try testCompileWithOutputAndOptions(
        "#pragma code_page(65001)\nSTRINGTABLE { 1 \"\x80\" }",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\"\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xfd\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        .{ .cwd = std.fs.cwd(), .default_code_page = .windows1252 },
    );

    // 1. single escaped NUL character *does not* act as a terminator
    // 2. two escaped NUL characters *do* act as a terminator
    // 3. trailing escaped NUL characters are trimmed unconditionally
    try testCompileWithOutput(
        \\STRINGTABLE {
        \\ 1 "foo\000bar"
        \\ 2 "foo\000\000bar"
        \\ 3 "foo\000"
        \\}
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00:\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00f\x00o\x00o\x00\x00\x00b\x00a\x00r\x00\x03\x00f\x00o\x00o\x00\x03\x00f\x00o\x00o\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
}

test "stringtable optional-statements" {
    try testCompileWithOutput(
        "STRINGTABLE VERSION 1 CHARACTERISTICS 65536 VERSION 2 { 0 \"hello\" }",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00*\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x02\x00\x00\x00\x00\x00\x01\x00\x05\x00h\x00e\x00l\x00l\x00o\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );

    // 63 is the max sublanguage id (u6), so 65 will overflow
    try testCompileWithOutput(
        "STRINGTABLE LANGUAGE 1, 65 { 0 \"hello\" }",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00*\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\x01\x04\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00h\x00e\x00l\x00l\x00o\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );

    // interaction with top-level version/characteristics
    try testCompileWithOutput(
        \\CHARACTERISTICS 1
        \\STRINGTABLE VERSION 3 { 0 "hello" }
        \\VERSION 2
        \\CHARACTERISTICS 2
        \\STRINGTABLE { 1 "hello" }
        \\STRINGTABLE { 16 "hello" }
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x004\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00h\x00e\x00l\x00l\x00o\x00\x05\x00h\x00e\x00l\x00l\x00o\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00*\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x02\x00\x00\x00\x00\x000\x10\t\x04\x02\x00\x00\x00\x02\x00\x00\x00\x05\x00h\x00e\x00l\x00l\x00o\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
}

test "separate stringtable per language" {
    try testCompileWithOutput(
        \\STRINGTABLE LANGUAGE 0,0 { 0 "hello" }
        \\STRINGTABLE LANGUAGE 0,1 { 0 "hello" }
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00*\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00h\x00e\x00l\x00l\x00o\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00*\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00h\x00e\x00l\x00l\x00o\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
}

test "case insensitivity" {
    try testCompileWithOutput(
        "StringTABLE VERSION 1 characteristics 65536 Version 2 Begin 0 \"hello\" end",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00*\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x02\x00\x00\x00\x00\x00\x01\x00\x05\x00h\x00e\x00l\x00l\x00o\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
}

test "top-level statements" {
    try testCompileWithOutput(
        \\1 RCDATA {}
        \\LANGUAGE 1,1
        \\VERSION 1
        \\CHARACTERISTICS 1
        \\2 RCDATA {}
        \\LANGUAGE 0,0
        \\VERSION 2
        \\CHARACTERISTICS 2
        \\3 RCDATA {}
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x02\x00\x00\x00\x00\x000\x00\x01\x04\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x03\x00\x00\x00\x00\x000\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00",
        std.fs.cwd(),
    );
    try testCompileWithOutput(
        \\LANGUAGE 1,1
        \\STRINGTABLE { 0 "hello" }
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00*\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\x01\x04\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00h\x00e\x00l\x00l\x00o\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
}

test "font resource" {
    var tmp_dir = std.testing.tmpDir(.{});
    defer tmp_dir.cleanup();

    try tmp_dir.dir.writeFile(.{ .sub_path = "empty.fnt", .data = "" });

    const expected = "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x08\x00\xff\xff\x01\x00\x00\x00\x00\x00 \x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x08\x00\xff\xff\x02\x00\x00\x00\x00\x00p\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x002\x01\x00\x00,\x00\x00\x00\xff\xff\x07\x00F\x00O\x00N\x00T\x00D\x00I\x00R\x00\x00\x00\x00\x00\x00\x00P\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";

    try testCompileWithOutput(
        \\1 FONT FIXED empty.fnt
        \\2 FONT MOVEABLE DISCARDABLE PRELOAD empty.fnt
    ,
        expected,
        tmp_dir.dir,
    );

    // For duplicate IDs, all but the first are ignored
    try testCompileWithOutput(
        \\1 FONT FIXED empty.fnt
        \\2 FONT MOVEABLE DISCARDABLE PRELOAD empty.fnt
        \\2 FONT FIXED empty.fnt
        \\0x1 FONT FIXED empty.fnt
    ,
        expected,
        tmp_dir.dir,
    );
}

test "accelerators resource" {
    try testCompileWithOutput(
        \\1 ACCELERATORS { 1, 1, ASCII }
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00 \x00\x00\x00\xff\xff\t\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x01\x00\x01\x00\x00\x00",
        std.fs.cwd(),
    );
    try testCompileWithOutput(
        \\1 ACCELERATORS { "c", 65537, VIRTKEY, CONTROL, ALT, SHIFT }
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00 \x00\x00\x00\xff\xff\t\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x9d\x00C\x00\x01\x00\x00\x00",
        std.fs.cwd(),
    );
    try testCompileErrorDetails(
        &.{.{ .type = .err, .str = "accelerator type [ASCII or VIRTKEY] required when key is an integer" }},
        "1 ACCELERATORS { 1, 1 }",
        null,
    );
    try testCompileErrorDetails(
        &.{.{ .type = .warning, .str = "SHIFT or CONTROL used without VIRTKEY" }},
        "1 ACCELERATORS { \"c\", 1, SHIFT }",
        null,
    );
    try testCompileErrorDetails(
        &.{.{ .type = .warning, .str = "SHIFT or CONTROL used without VIRTKEY" }},
        "1 ACCELERATORS { \"c\", 1, CONTROL }",
        null,
    );
}

test "dialog, dialogex resource" {
    try testCompileWithOutput(
        \\1 DIALOGEX FIXED DISCARDABLE 1, 2, 3, 4
        \\STYLE 0x80000000 | 0x00800000
        \\CAPTION "Error!"
        \\EXSTYLE 1
        \\CLASS "hello1"
        \\CLASS 2
        \\MENU "1"
        \\FONT 12 "first", 1001-1, 65537L, 257-2
        \\FONT 8+2,, ,, "second", 0
        \\{}
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00H\x00\x00\x00 \x00\x00\x00\xff\xff\x05\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x01\x00\x00\x00@\x00\xc0\x80\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\"\x001\x00\"\x00\x00\x00\xff\xff\x02\x00E\x00r\x00r\x00o\x00r\x00!\x00\x00\x00\n\x00\x00\x00\x01\x01s\x00e\x00c\x00o\x00n\x00d\x00\x00\x00",
        std.fs.cwd(),
    );
    try testCompileErrorDetailsWithDir(
        &.{
            .{ .type = .warning, .str = "the id of this menu would be miscompiled by the Win32 RC compiler" },
            .{ .type = .note, .str = "the Win32 RC compiler would evaluate the id as the ordinal/number value 455" },
            .{ .type = .note, .str = "to avoid the potential miscompilation, the first character of the id should not be a digit" },
        },
        \\1 DIALOGEX 1, 2, 3, 4
        \\MENU 5+5
        \\CLASS 5+5
        \\{}
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00 \x00\x00\x00\xff\xff\x05\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88\x80\x00\x00\x01\x00\x02\x00\x03\x00\x04\x005\x00+\x005\x00\x00\x00\xff\xff\n\x00\x00\x00",
        std.fs.cwd(),
    );
    try testCompileErrorDetailsWithDir(
        &.{
            .{ .type = .warning, .str = "this statement was ignored; when multiple statements of the same type are specified, only the last takes precedence" },
            .{ .type = .warning, .str = "this statement was ignored; when multiple statements of the same type are specified, only the last takes precedence" },
            .{ .type = .warning, .str = "this class would be miscompiled by the Win32 RC compiler" },
            .{ .type = .note, .str = "the Win32 RC compiler would evaluate it as the ordinal/number value 62790" },
            .{ .type = .note, .str = "to avoid the potential miscompilation, only specify one class per dialog resource" },
        },
        \\1 DIALOGEX 1, 2, 3, 4
        \\CLASS 5+5
        \\CLASS "intermediate string is ignored and doesn't negate the forced ordinal"
        \\CLASS "forced ordinal"
        \\{}
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00<\x00\x00\x00 \x00\x00\x00\xff\xff\x05\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88\x80\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x00\x00f\x00o\x00r\x00c\x00e\x00d\x00 \x00o\x00r\x00d\x00i\x00n\x00a\x00l\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
    try testCompileWithOutput(
        \\1 DIALOG 1, 2, 3, 4 {}
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00 \x00\x00\x00\xff\xff\x05\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88\x80\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
    try testCompileWithOutput(
        \\1 DIALOGEX 1, 2, 3, 4 {
        \\  AUTO3STATE,, "mytext",, 900-1,, 1 2 3 4, 0x22222222, 0x12345678, 100 { "AUTO3STATE" }
        \\}
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00V\x00\x00\x00 \x00\x00\x00\xff\xff\x05\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88\x80\x01\x00\x01\x00\x02\x00\x03\x00\x04\x00\x00\x00\x00\x00\x00\x00d\x00\x00\x00xV4\x12&\"#r\x01\x00\x02\x00\x03\x00\x04\x00\x83\x03\x00\x00\xff\xff\x80\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\n\x00AUTO3STATE\x00\x00",
        std.fs.cwd(),
    );
    // Note: Extra data is not tested extensively here due to a miscompilation in the Windows RC
    //       compiler where it would add extra padding bytes if the data of a control ends on
    //       an odd offset. We avoid that here by ensuring that the extra data has an even number
    //       of bytes.
    try testCompileWithOutput(
        \\1 DIALOGEX 1, 2, 3, 4
        \\{
        \\    AUTO3STATE,, "mytext",, 900,, 1 2 3 4, 0, 0, 100 { "1234" }
        \\    AUTOCHECKBOX "mytext", 901, 1, 2, 3, 4, 0, 0, 100
        \\    AUTORADIOBUTTON "mytext", 902, 1, 2, 3, 4, 0, 0, 100
        \\    CHECKBOX "mytext", 903, 1, 2, 3, 4, 0, 0, 100
        \\    COMBOBOX 904,, 1 2 3 4, 0, 0, 100
        \\    CTEXT "mytext", 906, 1, 2, 3, 4, 0, 0, 100
        \\    CTEXT "mytext", 9061, 1, 2, 3, 4
        \\    DEFPUSHBUTTON "mytext", 907, 1, 2, 3, 4, 0, 0, 100
        \\    EDITTEXT 908, 1, 2, 3, 4, 0, 0, 100
        \\    HEDIT 9081, 1, 2, 3, 4, 0, 0, 100
        \\    IEDIT 9082, 1, 2, 3, 4, 0, 0, 100
        \\    GROUPBOX "mytext", 909, 1, 2, 3, 4, 0, 0, 100
        \\    ICON "mytext", 910, 1, 2, 3, 4, 0, 0, 100
        \\    LISTBOX 911, 1, 2, 3, 4, 0, 0, 100
        \\    LTEXT "mytext", 912, 1, 2, 3, 4, 0, 0, 100
        \\    PUSHBOX "mytext", 913, 1, 2, 3, 4, 0, 0, 100
        \\    PUSHBUTTON "mytext", 914, 1, 2, 3, 4, 0, 0, 100
        \\    RADIOBUTTON "mytext", 915, 1, 2, 3, 4, 0, 0, 100
        \\    RTEXT "mytext", 916, 1, 2, 3, 4, 0, 0, 100
        \\    SCROLLBAR 917, 1, 2, 3, 4, 0, 0, 100
        \\    STATE3 "mytext", 918, 1, 2, 3, 4, 0, 0, 100
        \\    USERBUTTON "mytext", 919, 1, 2, 3, 4, 0, 0, 100
        \\}
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x03\x00\x00 \x00\x00\x00\xff\xff\x05\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88\x80\x16\x00\x01\x00\x02\x00\x03\x00\x04\x00\x00\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x06\x00\x01P\x01\x00\x02\x00\x03\x00\x04\x00\x84\x03\x00\x00\xff\xff\x80\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x04\x001234d\x00\x00\x00\x00\x00\x00\x00\x03\x00\x01P\x01\x00\x02\x00\x03\x00\x04\x00\x85\x03\x00\x00\xff\xff\x80\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\t\x00\x00P\x01\x00\x02\x00\x03\x00\x04\x00\x86\x03\x00\x00\xff\xff\x80\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x02\x00\x01P\x01\x00\x02\x00\x03\x00\x04\x00\x87\x03\x00\x00\xff\xff\x80\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\x01\x00\x02\x00\x03\x00\x04\x00\x88\x03\x00\x00\xff\xff\x85\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02P\x01\x00\x02\x00\x03\x00\x04\x00\x8a\x03\x00\x00\xff\xff\x82\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02P\x01\x00\x02\x00\x03\x00\x04\x00e#\x00\x00\xff\xff\x82\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01P\x01\x00\x02\x00\x03\x00\x04\x00\x8b\x03\x00\x00\xff\xff\x80\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x81P\x01\x00\x02\x00\x03\x00\x04\x00\x8c\x03\x00\x00\xff\xff\x81\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x81P\x01\x00\x02\x00\x03\x00\x04\x00y#\x00\x00\xff\xff\x81\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x81P\x01\x00\x02\x00\x03\x00\x04\x00z#\x00\x00\xff\xff\x81\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00P\x01\x00\x02\x00\x03\x00\x04\x00\x8d\x03\x00\x00\xff\xff\x80\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00P\x01\x00\x02\x00\x03\x00\x04\x00\x8e\x03\x00\x00\xff\xff\x82\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x01\x00\x80P\x01\x00\x02\x00\x03\x00\x04\x00\x8f\x03\x00\x00\xff\xff\x83\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02P\x01\x00\x02\x00\x03\x00\x04\x00\x90\x03\x00\x00\xff\xff\x82\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\n\x00\x01P\x01\x00\x02\x00\x03\x00\x04\x00\x91\x03\x00\x00\xff\xff\x80\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01P\x01\x00\x02\x00\x03\x00\x04\x00\x92\x03\x00\x00\xff\xff\x80\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00P\x01\x00\x02\x00\x03\x00\x04\x00\x93\x03\x00\x00\xff\xff\x80\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x02\x00\x02P\x01\x00\x02\x00\x03\x00\x04\x00\x94\x03\x00\x00\xff\xff\x82\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\x01\x00\x02\x00\x03\x00\x04\x00\x95\x03\x00\x00\xff\xff\x84\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x05\x00\x01P\x01\x00\x02\x00\x03\x00\x04\x00\x96\x03\x00\x00\xff\xff\x80\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x08\x00\x01P\x01\x00\x02\x00\x03\x00\x04\x00\x97\x03\x00\x00\xff\xff\x80\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );

    try testCompileErrorDetailsWithDir(
        &.{
            .{ .type = .warning, .str = "control with id 905 already defined for this dialog" },
            .{ .type = .note, .str = "previous definition of control with id 905 here" },
            .{ .type = .warning, .str = "control with id 905 already defined for this dialog" },
            .{ .type = .note, .str = "previous definition of control with id 905 here" },
        },
        \\1 DIALOGEX 1, 2, 3, 4
        \\{
        \\    CONTROL "mytext",, 905,, "\x42UTTON",, 1,, 2 3 4 0, 0, 100
        \\    CONTROL "mytext",, 905,, L"EDIT",, 1,, 2 3 4 0, 0, 100
        \\    CONTROL "mytext",, 905,, COMBOBOX,, 1,, 2 3 4 0, 0, 100
        \\}
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x00\x00\x00 \x00\x00\x00\xff\xff\x05\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88\x80\x03\x00\x01\x00\x02\x00\x03\x00\x04\x00\x00\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00P\x02\x00\x03\x00\x04\x00\x00\x00\x89\x03\x00\x00\xff\xff\x80\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00P\x02\x00\x03\x00\x04\x00\x00\x00\x89\x03\x00\x00\xff\xff\x81\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00P\x02\x00\x03\x00\x04\x00\x00\x00\x89\x03\x00\x00\xff\xff\x85\x00m\x00y\x00t\x00e\x00x\x00t\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );

    // Numbers as the control name
    try testCompileWithOutput(
        \\1 DIALOGEX 1, 2, 3, 4
        \\{
        \\    CONTROL 0z,, 905,, BUTTON,, 1,, 2 3 4 0, 0, 100
        \\    CONTROL 0x16,, 906,, BUTTON,, 1,, 2 3 4 0, 0, 100
        \\    CONTROL -1,, 907,, BUTTON,, 1,, 2 3 4 0, 0, 100
        \\    CONTROL ~1,, 908,, BUTTON,, 1,, 2 3 4 0, 0, 100
        \\}
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xae\x00\x00\x00 \x00\x00\x00\xff\xff\x05\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88\x80\x04\x00\x01\x00\x02\x00\x03\x00\x04\x00\x00\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00P\x02\x00\x03\x00\x04\x00\x00\x00\x89\x03\x00\x00\xff\xff\x80\x00\xff\xff\x00\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00P\x02\x00\x03\x00\x04\x00\x00\x00\x8a\x03\x00\x00\xff\xff\x80\x00\xff\xff\x16\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00P\x02\x00\x03\x00\x04\x00\x00\x00\x8b\x03\x00\x00\xff\xff\x80\x00\xff\xff\xff\xff\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00P\x02\x00\x03\x00\x04\x00\x00\x00\x8c\x03\x00\x00\xff\xff\x80\x00\xff\xff\xfe\xff\x00\x00\x00\x00",
        std.fs.cwd(),
    );
}

test "not expressions" {
    try testCompileWithOutput(
        \\1 DIALOGEX 1, 2, 3, 4
        \\STYLE ~0 | NOT 1
        \\EXSTYLE ~0 | NOT 1
        \\{
        \\  AUTOCHECKBOX "",1,1,1,1,1, (NOT -1)
        \\  AUTOCHECKBOX "",1,1,1,1,1, 1 | NOT ~0 | 1
        \\  AUTOCHECKBOX "",1,1,1,1,1, 1 | NOT ~0 - 5
        \\  AUTOCHECKBOX "",1,1,1,1,1, 1 | NOT ~0 & 5
        \\  AUTOCHECKBOX "",1,1,1,1,1, 1 | NOT ~0 + 5
        \\  AUTOCHECKBOX "",1,1,1,1,1, 3 | NOT 2 | 4
        \\  AUTOCHECKBOX "",1,1,1,1,1, NOT 3
        \\}
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00 \x00\x00\x00\xff\xff\x05\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\xfe\xff\xff\xff\xbe\xff\xff\xff\x07\x00\x01\x00\x02\x00\x03\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x00\x00\xff\xff\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x00\x00\xff\xff\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb\xff\xff\xff\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x00\x00\xff\xff\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x00\x00\xff\xff\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x00\x00\xff\xff\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x01P\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x00\x00\xff\xff\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01P\x01\x00\x01\x00\x01\x00\x01\x00\x01\x00\x00\x00\xff\xff\x80\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
}

test "menu, menuex resource" {
    try testCompileWithOutput(
        \\1 MENU
        \\{
        \\    MENUITEM SEPARATOR
        \\    MENUITEM "hello", 100, CHECKED, GRAYED, HELP, INACTIVE, MENUBARBREAK, MENUBREAK
        \\}
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00 \x00\x00\x00\xff\xff\x04\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xeb@d\x00h\x00e\x00l\x00l\x00o\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
    try testCompileWithOutput(
        \\1 MENU
        \\{
        \\  POPUP "hello", CHECKED, GRAYED, HELP, INACTIVE, MENUBARBREAK, MENUBREAK {
        \\    MENUITEM SEPARATOR
        \\    POPUP "" { MENUITEM SEPARATOR }
        \\    POPUP "" { MENUITEM SEPARATOR }
        \\  }
        \\}
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00,\x00\x00\x00 \x00\x00\x00\xff\xff\x04\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfb@h\x00e\x00l\x00l\x00o\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x80\x00\x00\x00\x00\x00\x90\x00\x00\x00\x80\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
    try testCompileWithOutput(
        \\1 MENUEX 1000
        \\BEGIN
        \\  POPUP "&File", 200,,, 1001
        \\  BEGIN
        \\    MENUITEM "&Open\tCtrl+O", 100
        \\    MENUITEM "", -1, 0x00000800L
        \\    MENUITEM "&Exit\tAlt+X",  101
        \\  END
        \\  POPUP "&View", 201,,, 1002
        \\  BEGIN
        \\    MENUITEM "&Status Bar", 102,, 0x00000008L
        \\  END
        \\END
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x00\x00\x00 \x00\x00\x00\xff\xff\x04\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x04\x00\xe8\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x01\x00&\x00F\x00i\x00l\x00e\x00\x00\x00\x00\x00\xe9\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\x00\x00\x00\x00\x00&\x00O\x00p\x00e\x00n\x00\t\x00C\x00t\x00r\x00l\x00+\x00O\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00e\x00\x00\x00\x80\x00&\x00E\x00x\x00i\x00t\x00\t\x00A\x00l\x00t\x00+\x00X\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc9\x00\x00\x00\x81\x00&\x00V\x00i\x00e\x00w\x00\x00\x00\x00\x00\xea\x03\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00f\x00\x00\x00\x80\x00&\x00S\x00t\x00a\x00t\x00u\x00s\x00 \x00B\x00a\x00r\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
}

test "versioninfo resource" {
    try testCompileWithOutput(
        \\1 VERSIONINFO FIXED
        \\FILEVERSION 1,2,3,4
        \\FILEVERSION 1
        \\PRODUCTVERSION 1,3-1,3,4
        \\FILEFLAGSMASK 1
        \\FILEFLAGS (1|2)
        \\FILEOS 2
        \\FILETYPE 3
        \\FILESUBTYPE 4
        \\{}
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\\\x00\x00\x00 \x00\x00\x00\xff\xff\x10\x00\xff\xff\x01\x00\x00\x00\x00\x00 \x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\\\x004\x00\x00\x00V\x00S\x00_\x00V\x00E\x00R\x00S\x00I\x00O\x00N\x00_\x00I\x00N\x00F\x00O\x00\x00\x00\x00\x00\xbd\x04\xef\xfe\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x02\x00\x01\x00\x04\x00\x03\x00\x01\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
    // This tests some edge cases around padding, data size, etc
    try testCompileWithOutput(
        \\test VERSIONINFO
        \\BEGIN
        \\  VALUE "key" 1L 2
        \\  BLOCK "" BEGIN VALUE "key", "a" END
        \\END
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x90\x00\x00\x00(\x00\x00\x00\xff\xff\x10\x00T\x00E\x00S\x00T\x00\x00\x00\x00\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x90\x004\x00\x00\x00V\x00S\x00_\x00V\x00E\x00R\x00S\x00I\x00O\x00N\x00_\x00I\x00N\x00F\x00O\x00\x00\x00\x00\x00\xbd\x04\xef\xfe\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x06\x00\x00\x00k\x00e\x00y\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x1c\x00\x00\x00\x01\x00\x00\x00\x14\x00\x02\x00\x01\x00k\x00e\x00y\x00\x00\x00\x00\x00a\x00\x00\x00",
        std.fs.cwd(),
    );

    // Trailing commas dictate null-termination in strings
    try testCompileWithOutput(
        \\test VERSIONINFO
        \\BEGIN
        \\  VALUE "key", "a" "b" "c"
        \\  VALUE "key", "a", "b", "c"
        \\END
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x90\x00\x00\x00(\x00\x00\x00\xff\xff\x10\x00T\x00E\x00S\x00T\x00\x00\x00\x00\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x90\x004\x00\x00\x00V\x00S\x00_\x00V\x00E\x00R\x00S\x00I\x00O\x00N\x00_\x00I\x00N\x00F\x00O\x00\x00\x00\x00\x00\xbd\x04\xef\xfe\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x04\x00\x01\x00k\x00e\x00y\x00\x00\x00\x00\x00a\x00b\x00c\x00\x00\x00\x1c\x00\x06\x00\x01\x00k\x00e\x00y\x00\x00\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00",
        std.fs.cwd(),
    );

    // Null-terminator handling
    try testCompileWithOutput(
        \\test VERSIONINFO
        \\BEGIN
        \\  VALUE "OriginalFilename","CauSamplePlugin.dll\0"
        \\  VALUE "CompanyNamea", "\0aaaa\0"
        \\  VALUE "FileDescription\0asajnf", "VCExplore MFC Application\0"
        \\  VALUE "FileVersion", "1, 0, 0, 1\0"
        \\  VALUE "key", "a" "\0" "hello"
        \\  VALUE "key", "a" "\0"
        \\END
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x94\x01\x00\x00(\x00\x00\x00\xff\xff\x10\x00T\x00E\x00S\x00T\x00\x00\x00\x00\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x94\x014\x00\x00\x00V\x00S\x00_\x00V\x00E\x00R\x00S\x00I\x00O\x00N\x00_\x00I\x00N\x00F\x00O\x00\x00\x00\x00\x00\xbd\x04\xef\xfe\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\x00\x14\x00\x01\x00O\x00r\x00i\x00g\x00i\x00n\x00a\x00l\x00F\x00i\x00l\x00e\x00n\x00a\x00m\x00e\x00\x00\x00C\x00a\x00u\x00S\x00a\x00m\x00p\x00l\x00e\x00P\x00l\x00u\x00g\x00i\x00n\x00.\x00d\x00l\x00l\x00\x00\x00 \x00\x00\x00\x01\x00C\x00o\x00m\x00p\x00a\x00n\x00y\x00N\x00a\x00m\x00e\x00a\x00\x00\x00\\\x00\x1a\x00\x01\x00F\x00i\x00l\x00e\x00D\x00e\x00s\x00c\x00r\x00i\x00p\x00t\x00i\x00o\x00n\x00\x00\x00\x00\x00V\x00C\x00E\x00x\x00p\x00l\x00o\x00r\x00e\x00 \x00M\x00F\x00C\x00 \x00A\x00p\x00p\x00l\x00i\x00c\x00a\x00t\x00i\x00o\x00n\x00\x00\x006\x00\x0b\x00\x01\x00F\x00i\x00l\x00e\x00V\x00e\x00r\x00s\x00i\x00o\x00n\x00\x00\x00\x00\x001\x00,\x00 \x000\x00,\x00 \x000\x00,\x00 \x001\x00\x00\x00\x00\x00\x1e\x00\x07\x00\x01\x00k\x00e\x00y\x00\x00\x00\x00\x00a\x00h\x00e\x00l\x00l\x00o\x00\x00\x00\x00\x00\x14\x00\x02\x00\x01\x00k\x00e\x00y\x00\x00\x00\x00\x00a\x00\x00\x00",
        std.fs.cwd(),
    );
}

test "shell32 versioninfo" {
    // This is the shell32.dll VERSIONINFO from https://devblogs.microsoft.com/oldnewthing/20061221-02/?p=28643
    try testCompileWithOutput(
        \\1 VERSIONINFO
        \\FILEVERSION    3,0,2900,2869
        \\PRODUCTVERSION 3,0,2900,2869
        \\FILEFLAGSMASK  0x0000003FL
        \\FILEFLAGS      0
        \\FILEOS         0x00040004L
        \\FILETYPE       0x00000002L
        \\FILESUBTYPE    0x00000000L
        \\BEGIN
        \\ BLOCK "StringFileInfo"
        \\ BEGIN
        \\  BLOCK "040904B0"
        \\  BEGIN
        \\   VALUE "CompanyName", "Microsoft Corporation"
        \\   VALUE "FileDescription", "Windows Shell Common Dll"
        \\   VALUE "FileVersion", "6.00.2900.2869 (xpsp_sp2_gdr.060316-1512)"
        \\   VALUE "InternalName", "SHELL32"
        \\   VALUE "LegalCopyright", "\251 Microsoft Corporation. All rights reserved."
        \\   VALUE "OriginalFilename", "SHELL32.DLL"
        \\   VALUE "ProductName", "Microsoft\256 Windows\256 Operating System"
        \\   VALUE "ProductVersion", "6.00.2900.2869"
        \\  END
        \\ END
        \\ BLOCK "VarFileInfo"
        \\ BEGIN
        \\  VALUE "Translation", 0x0409, 0x04B0
        \\ END
        \\END
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x98\x03\x00\x00 \x00\x00\x00\xff\xff\x10\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x98\x034\x00\x00\x00V\x00S\x00_\x00V\x00E\x00R\x00S\x00I\x00O\x00N\x00_\x00I\x00N\x00F\x00O\x00\x00\x00\x00\x00\xbd\x04\xef\xfe\x00\x00\x01\x00\x00\x00\x03\x005\x0bT\x0b\x00\x00\x03\x005\x0bT\x0b?\x00\x00\x00\x00\x00\x00\x00\x04\x00\x04\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\x02\x00\x00\x01\x00S\x00t\x00r\x00i\x00n\x00g\x00F\x00i\x00l\x00e\x00I\x00n\x00f\x00o\x00\x00\x00\xd2\x02\x00\x00\x01\x000\x004\x000\x009\x000\x004\x00B\x000\x00\x00\x00L\x00\x16\x00\x01\x00C\x00o\x00m\x00p\x00a\x00n\x00y\x00N\x00a\x00m\x00e\x00\x00\x00\x00\x00M\x00i\x00c\x00r\x00o\x00s\x00o\x00f\x00t\x00 \x00C\x00o\x00r\x00p\x00o\x00r\x00a\x00t\x00i\x00o\x00n\x00\x00\x00Z\x00\x19\x00\x01\x00F\x00i\x00l\x00e\x00D\x00e\x00s\x00c\x00r\x00i\x00p\x00t\x00i\x00o\x00n\x00\x00\x00\x00\x00W\x00i\x00n\x00d\x00o\x00w\x00s\x00 \x00S\x00h\x00e\x00l\x00l\x00 \x00C\x00o\x00m\x00m\x00o\x00n\x00 \x00D\x00l\x00l\x00\x00\x00\x00\x00t\x00*\x00\x01\x00F\x00i\x00l\x00e\x00V\x00e\x00r\x00s\x00i\x00o\x00n\x00\x00\x00\x00\x006\x00.\x000\x000\x00.\x002\x009\x000\x000\x00.\x002\x008\x006\x009\x00 \x00(\x00x\x00p\x00s\x00p\x00_\x00s\x00p\x002\x00_\x00g\x00d\x00r\x00.\x000\x006\x000\x003\x001\x006\x00-\x001\x005\x001\x002\x00)\x00\x00\x000\x00\x08\x00\x01\x00I\x00n\x00t\x00e\x00r\x00n\x00a\x00l\x00N\x00a\x00m\x00e\x00\x00\x00S\x00H\x00E\x00L\x00L\x003\x002\x00\x00\x00\x80\x00.\x00\x01\x00L\x00e\x00g\x00a\x00l\x00C\x00o\x00p\x00y\x00r\x00i\x00g\x00h\x00t\x00\x00\x00\xa9\x00 \x00M\x00i\x00c\x00r\x00o\x00s\x00o\x00f\x00t\x00 \x00C\x00o\x00r\x00p\x00o\x00r\x00a\x00t\x00i\x00o\x00n\x00.\x00 \x00A\x00l\x00l\x00 \x00r\x00i\x00g\x00h\x00t\x00s\x00 \x00r\x00e\x00s\x00e\x00r\x00v\x00e\x00d\x00.\x00\x00\x00@\x00\x0c\x00\x01\x00O\x00r\x00i\x00g\x00i\x00n\x00a\x00l\x00F\x00i\x00l\x00e\x00n\x00a\x00m\x00e\x00\x00\x00S\x00H\x00E\x00L\x00L\x003\x002\x00.\x00D\x00L\x00L\x00\x00\x00j\x00%\x00\x01\x00P\x00r\x00o\x00d\x00u\x00c\x00t\x00N\x00a\x00m\x00e\x00\x00\x00\x00\x00M\x00i\x00c\x00r\x00o\x00s\x00o\x00f\x00t\x00\xae\x00 \x00W\x00i\x00n\x00d\x00o\x00w\x00s\x00\xae\x00 \x00O\x00p\x00e\x00r\x00a\x00t\x00i\x00n\x00g\x00 \x00S\x00y\x00s\x00t\x00e\x00m\x00\x00\x00\x00\x00B\x00\x0f\x00\x01\x00P\x00r\x00o\x00d\x00u\x00c\x00t\x00V\x00e\x00r\x00s\x00i\x00o\x00n\x00\x00\x006\x00.\x000\x000\x00.\x002\x009\x000\x000\x00.\x002\x008\x006\x009\x00\x00\x00\x00\x00D\x00\x00\x00\x01\x00V\x00a\x00r\x00F\x00i\x00l\x00e\x00I\x00n\x00f\x00o\x00\x00\x00\x00\x00$\x00\x04\x00\x00\x00T\x00r\x00a\x00n\x00s\x00l\x00a\x00t\x00i\x00o\x00n\x00\x00\x00\x00\x00\t\x04\xb0\x04",
        std.fs.cwd(),
    );
}

test "dangling invalid node" {
    try testCompileWithOutput(
        \\blah
        \\
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
}

test "dlginclude" {
    try testCompileWithOutput(
        \\#pragma code_page(65001)
        \\1 DLGINCLUDE "something€𐍈ह.h"
        \\2 DLGINCLUDE FIXED L"Something€𐍈ह.h"
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00 \x00\x00\x00\xff\xff\x11\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00something\x80???.h\x00\x10\x00\x00\x00 \x00\x00\x00\xff\xff\x11\x00\xff\xff\x02\x00\x00\x00\x00\x00 \x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00Something\x80???.h\x00",
        std.fs.cwd(),
    );
}

test "toolbar" {
    try testCompileWithOutput(
        \\143 TOOLBAR 16+1, 15
        \\BEGIN
        \\    BUTTON 32772
        \\    SEPARATOR
        \\    BUTTON 32773
        \\    SEPARATOR
        \\    BUTTON 32774
        \\END
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00 \x00\x00\x00\xff\xff\xf1\x00\xff\xff\x8f\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x11\x00\x0f\x00\x05\x00\x04\x80\x00\x00\x05\x80\x00\x00\x06\x80\x00\x00",
        std.fs.cwd(),
    );
}

test "messagetable" {
    var tmp_dir = std.testing.tmpDir(.{});
    defer tmp_dir.cleanup();

    try tmp_dir.dir.writeFile(.{ .sub_path = "file.bin", .data = "hello world" });

    try testCompileWithOutput(
        \\1 MESSAGETABLE file.bin
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00 \x00\x00\x00\xff\xff\x0b\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00hello world\x00",
        tmp_dir.dir,
    );
}

test "dlginit" {
    var tmp_dir = std.testing.tmpDir(.{});
    defer tmp_dir.cleanup();

    try tmp_dir.dir.writeFile(.{ .sub_path = "file.bin", .data = "hello world" });

    try testCompileWithOutput(
        \\1 DLGINIT
        \\BEGIN
        \\    1L, 0x403, 1, 523 0x6c62 L"a"
        \\    0
        \\END
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00 \x00\x00\x00\xff\xff\xf0\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x04\x01\x00\x0b\x02bla\x00\x00\x00",
        std.fs.cwd(),
    );

    try testCompileWithOutput(
        \\1 DLGINIT file.bin
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00 \x00\x00\x00\xff\xff\xf0\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00hello world\x00",
        tmp_dir.dir,
    );
}

test "resource type >= 256" {
    try testCompileWithOutput(
        \\1 257 {}
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x01\x01\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
}

test "aniicon, anicursor" {
    var tmp_dir = std.testing.tmpDir(.{});
    defer tmp_dir.cleanup();

    try tmp_dir.dir.writeFile(.{ .sub_path = "test.ani", .data = test_riff_data });

    try testCompileWithOutput(
        \\1 ICON test.ani
        \\2 CURSOR test.ani
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x008\x00\x00\x00 \x00\x00\x00\xff\xff\x16\x00\xff\xff\x01\x00\x00\x00\x00\x00\x10\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00RIFF,\x00\x00\x00ACONanih$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x008\x00\x00\x00 \x00\x00\x00\xff\xff\x15\x00\xff\xff\x02\x00\x00\x00\x00\x00\x10\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00RIFF,\x00\x00\x00ACONanih$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00",
        tmp_dir.dir,
    );
}

test "search paths" {
    var tmp_dir = std.testing.tmpDir(.{});
    defer tmp_dir.cleanup();

    try tmp_dir.dir.makePath("inc");
    try tmp_dir.dir.writeFile(.{ .sub_path = "inc/some_crazy_file.bin", .data = "foo" });

    // The file is not in the include path so it should not be found
    try testCompileErrorDetailsWithDir(
        &.{
            .{ .type = .err, .str = "unable to open file 'some_crazy_file.bin': FileNotFound" },
        },
        "1 RCDATA some_crazy_file.bin",
        null,
        tmp_dir.dir,
    );

    // Now we add the inc dir to the include path so it should now compile successfully.
    try testCompileErrorDetailsWithOptions(
        &.{},
        "1 RCDATA some_crazy_file.bin",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00foo\x00",
        .{
            .cwd = tmp_dir.dir,
            .extra_include_paths = &.{"inc"},
        },
    );

    // However, if we specify the filename as an absolute path, it should not be found.
    try testCompileErrorDetailsWithOptions(
        &.{
            .{ .type = .err, .str = "unable to open file '/some_crazy_file.bin': FileNotFound" },
        },
        "1 RCDATA \"/some_crazy_file.bin\"",
        null,
        .{
            .cwd = tmp_dir.dir,
            .extra_include_paths = &.{"inc"},
        },
    );
}

test "popup as top-level resource is user-defined" {
    try testCompileWithOutput(
        \\1 POPUP {}
    ,
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00P\x00O\x00P\x00U\x00P\x00\x00\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00",
        std.fs.cwd(),
    );
}

test "invalid char/codepoint in evaluated filename" {
    try testCompileErrorDetailsWithDir(
        &.{
            .{ .type = .err, .str = "evaluated filename contains a disallowed codepoint: <U+0000>" },
        },
        \\1 RCDATA "hello\x00world"
    ,
        null,
        std.fs.cwd(),
    );
}

test "filename evaluation" {
    var tmp_dir = std.testing.tmpDir(.{});
    defer tmp_dir.cleanup();

    // Wide and non-wide quoted strings behave the same for UTF-8 text
    try testCompileErrorDetailsWithDir(
        &.{.{ .type = .err, .str = "unable to open file 'кириллица': FileNotFound" }},
        \\#pragma code_page(65001)
        \\1 RCDATA "кириллица"
    ,
        null,
        tmp_dir.dir,
    );
    try testCompileErrorDetailsWithDir(
        &.{.{ .type = .err, .str = "unable to open file 'кириллица': FileNotFound" }},
        \\#pragma code_page(65001)
        \\1 RCDATA L"кириллица"
    ,
        null,
        tmp_dir.dir,
    );
    // Unquoted too
    try testCompileErrorDetailsWithDir(
        &.{.{ .type = .err, .str = "unable to open file 'кириллица': FileNotFound" }},
        \\#pragma code_page(65001)
        \\1 RCDATA кириллица
    ,
        null,
        tmp_dir.dir,
    );
    // Unquoted Windows-1252 should get converted to UTF-8, too
    // (€ is 0x80 in Windows-1252 but codepoint U+20AC which is encoded as 0xE2 0x82 0xAC in UTF-8)
    try testCompileErrorDetailsWithDir(
        &.{.{ .type = .err, .str = "unable to open file '€€€': FileNotFound" }},
        "#pragma code_page(1252)\n1 RCDATA \x80\x80\x80",
        null,
        tmp_dir.dir,
    );
    // Number literals are accepted
    try testCompileErrorDetailsWithDir(
        &.{.{ .type = .err, .str = "unable to open file '-12': FileNotFound" }},
        "#pragma code_page(1252)\n1 RCDATA -12",
        null,
        tmp_dir.dir,
    );

    // Invalid UTF-8 gets converted to �
    try testCompileErrorDetailsWithDir(
        &.{.{ .type = .err, .str = "unable to open file '����': FileNotFound" }},
        "#pragma code_page(65001)\n1 RCDATA \"\xf0\xf0\x80\x80\x80\"",
        null,
        tmp_dir.dir,
    );
    try testCompileErrorDetailsWithDir(
        &.{.{ .type = .err, .str = "unable to open file '����': FileNotFound" }},
        "#pragma code_page(65001)\n1 RCDATA L\"\xf0\xf0\x80\x80\x80\"",
        null,
        tmp_dir.dir,
    );
    // Same with unquoted literals
    try testCompileErrorDetailsWithDir(
        &.{.{ .type = .err, .str = "unable to open file '����': FileNotFound" }},
        "#pragma code_page(65001)\n1 RCDATA \xf0\xf0\x80\x80\x80",
        null,
        tmp_dir.dir,
    );

    // The max width of escapes is dependent on the string being wide
    try testCompileErrorDetailsWithDir(
        &.{.{ .type = .err, .str = "unable to open file ' AC': FileNotFound" }},
        \\1 RCDATA "\x20AC"
    ,
        null,
        tmp_dir.dir,
    );
    try testCompileErrorDetailsWithDir(
        &.{.{ .type = .err, .str = "unable to open file '€': FileNotFound" }},
        \\1 RCDATA L"\x20AC"
    ,
        null,
        tmp_dir.dir,
    );

    // Codepoints that cannot be encoded in UTF-8 get converted to �
    try testCompileErrorDetailsWithDir(
        &.{.{ .type = .err, .str = "unable to open file '�': FileNotFound" }},
        \\1 RCDATA L"\xD800"
    ,
        null,
        tmp_dir.dir,
    );
}

test "fileversion, productversion with L suffixed part" {
    try testCompileErrorDetails(
        &.{
            .{ .type = .warning, .str = "this fileversion parameter would be an error in the Win32 RC compiler" },
            .{ .type = .note, .str = "to avoid the error, remove any L suffixes from numbers within the parameter" },
            .{ .type = .warning, .str = "this productversion parameter would be an error in the Win32 RC compiler" },
            .{ .type = .note, .str = "to avoid the error, remove any L suffixes from numbers within the parameter" },
        },
        \\1 VERSIONINFO
        \\FILEVERSION 1L, 2, 3, 4
        \\PRODUCTVERSION 1, 2, (3+2L), 4
        \\{}
    ,
        null,
    );
}

test "separate input and output code pages" {
    // The string in the first RCDATA should be interpreted as UTF-8 but
    // encoded as Windows-1252, since the first #pragma code_page does not affect
    // the output code page.
    // The string in the second RCDATA should be interpreted as UTF-8 and also
    // encoded as UTF-8, since the second #pragma code_page affects both the input
    // and output code pages.
    try testCompileWithOutput(
        "#pragma code_page(65001)\n1 RCDATA { \"\x80\" }\n#pragma code_page(65001)\n2 RCDATA { \"\x80\" }",
        "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00?\x00\x00\x00\x03\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x02\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\xef\xbf\xbd\x00",
        std.fs.cwd(),
    );
}

test "input code page windows-1252, output code page utf8" {
    const source = "#pragma code_page(1252)\n1 RCDATA { \"\xd1\\x8a\\603\\106\xf6\\xb5\x90\x84\\506|\\x09\\102\x8c\\x9b\\754\" }";
    const expected = "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\xc3\x91\xef\xbf\xbd\xef\xbf\xbdF\xc3\xb6\xef\xbf\xbd\xc2\x90\xe2\x80\x9eF|\tB\xc5\x92\xef\xbf\xbd\xef\xbf\xbd\x00";
    try testCompileWithOutputAndOptions(source, expected, .{
        .cwd = std.fs.cwd(),
        .default_code_page = .utf8,
    });
}

test "input code page utf8, output code page windows-1252" {
    const source = "#pragma code_page(65001)\n1 RCDATA { \"\xd1\\x8a\\603\\106\xf6\\xb5\x90\x84\\506|\\x09\\102\x8c\\x9b\\754\" }";
    const expected = "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00?\x8a\x83F?\xb5??F|\tB?\x9b\xec\x00";
    try testCompileWithOutputAndOptions(source, expected, .{
        .cwd = std.fs.cwd(),
        .default_code_page = .windows1252,
    });
}

test "tab within a string literal" {
    try testCompileErrorDetails(
        &.{
            .{ .type = .warning, .str = "the tab character(s) in this string will be converted into a variable number of spaces (determined by the column of the tab character in the .rc file)" },
            .{ .type = .note, .str = "to include the tab character itself in a string, the escape sequence \\t should be used" },
        },
        // These \t are literal tab characters in the parsed Zig string.
        // There is a maximum of one warning per string, so even though
        // there are two tab characters, only one warning is produced.
        "1 RCDATA { \"\t\t\" }",
        null,
    );
}

test "escaped tab characters within strings" {
    // `source` corresponds to the following:
    //
    // 1 RCDATA {
    //  "\<tab>"
    // L"\<tab>"
    //      "\<tab>"
    //     L"\<tab>"
    // }
    // 2 DLGINCLUDE  "\<tab>"
    // 3 DLGINCLUDE L"\<tab>"
    // 4 DLGINCLUDE         "\<tab>"
    // 5 DLGINCLUDE        L"\<tab>"
    //
    // where the <tab>s are literal tabstop characters.
    // The intention is to test cases where the tabstop is
    // replaced by multiple spaces and a single space.
    const source = "1 RCDATA {\r\n \"\\\t\"\r\nL\"\\\t\"\r\n     \"\\\t\"\r\n    L\"\\\t\"\r\n}\r\n2 DLGINCLUDE  \"\\\t\"\r\n3 DLGINCLUDE L\"\\\t\"\r\n4 DLGINCLUDE         \"\\\t\"\r\n5 DLGINCLUDE        L\"\\\t\"";
    const expected = "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\\      \x00 \x00 \x00 \x00\\ \n\x00\x00\x00 \x00\x00\x00\xff\xff\x11\x00\xff\xff\x02\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\\        \x00\x00\x00\x08\x00\x00\x00 \x00\x00\x00\xff\xff\x11\x00\xff\xff\x03\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00       \x00\x03\x00\x00\x00 \x00\x00\x00\xff\xff\x11\x00\xff\xff\x04\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\\ \x00\x00\x01\x00\x00\x00 \x00\x00\x00\xff\xff\x11\x00\xff\xff\x05\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";

    try testCompileWithOutput(source, expected, std.fs.cwd());
}

test "DLGINCLUDE strings" {
    // \400 truncates to \x00 in the ascii literal
    // In the wide literal, \400 is Ā (U+0100) which is converted to A via the Windows-1252 best fit
    const source =
        \\1 DLGINCLUDE "\x41\501\777\xff\x80\x81кириллица\400"
        \\2 DLGINCLUDE L"\x41\501\777\xff\x80\x81кириллица\400"
    ;

    const windows1252_expected_output = "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x00 \x00\x00\x00\xff\xff\x11\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00AA\xff\xff\x80\x81\xd0\xba\xd0\xb8\xd1\x80\xd0\xb8\xd0\xbb\xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0\x00\x00\x00\x00\x1a\x00\x00\x00 \x00\x00\x00\xff\xff\x11\x00\xff\xff\x02\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00AL?\xff?\x81\xd0\xba\xd0\xb8\xd1\x80\xd0\xb8\xd0\xbb\xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0A\x00\x00\x00";
    const utf8_expected_output = "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00 \x00\x00\x00\xff\xff\x11\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00AA?????????????\x00\x11\x00\x00\x00 \x00\x00\x00\xff\xff\x11\x00\xff\xff\x02\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00AL?\xff?\x81?????????A\x00\x00\x00\x00";

    try testCompileWithOutput(source, windows1252_expected_output, std.fs.cwd());
    try testCompileWithOutputAndOptions(source, utf8_expected_output, .{
        .cwd = std.fs.cwd(),
        .default_code_page = .utf8,
    });
}

test "DLGINCLUDE input code page windows-1252, output code page utf8" {
    const source = "#pragma code_page(1252)\n1 DLGINCLUDE \"\xd1\\x8a\\603\\106\xf6\\xb5\x90\x84\\506|\\x09\\102\x8c\\x9b\\754\"";
    const expected = "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00 \x00\x00\x00\xff\xff\x11\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\xd1??F\xf6?\x90\x84F|\tB\x8c??\x00";
    try testCompileWithOutputAndOptions(source, expected, .{
        .cwd = std.fs.cwd(),
        .default_code_page = .utf8,
    });
}

test "DLGINCLUDE input code page utf8, output code page windows-1252" {
    const source = "#pragma code_page(65001)\n1 DLGINCLUDE \"\xd1\\x8a\\603\\106\xf6\\xb5\x90\x84\\506|\\x09\\102\x8c\\x9b\\754\"";
    const expected = "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00 \x00\x00\x00\xff\xff\x11\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00?\x8a\x83F?\xb5??F|\tB?\x9b\xec\x00";
    try testCompileWithOutputAndOptions(source, expected, .{
        .cwd = std.fs.cwd(),
        .default_code_page = .windows1252,
    });
}

test "DLGINCLUDE wide windows-1252" {
    const source =
        \\1 DLGINCLUDE L"€𐍈ह\x58bc\200001\777\xff\x80\x81кириллица\400"
    ;
    const expected = "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\x00\x00\x00 \x00\x00\x00\xff\xff\x11\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\xe2\x82\xac\xf0\x90\x8d\x88\xe0\xa4\xb9?\x01?\xff?\x81\xd0\xba\xd0\xb8\xd1\x80\xd0\xb8\xd0\xbb\xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0A\x00";
    try testCompileWithOutputAndOptions(source, expected, .{
        .cwd = std.fs.cwd(),
    });
}

test "DLGINCLUDE wide utf8" {
    const source =
        \\1 DLGINCLUDE L"€𐍈ह\x58bc\200001\777\xff\x80\x81кириллица\400"
    ;
    const expected = "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00 \x00\x00\x00\xff\xff\x11\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x80????\x01?\xff?\x81?????????A\x00\x00\x00\x00";
    try testCompileWithOutputAndOptions(source, expected, .{
        .cwd = std.fs.cwd(),
        .default_code_page = .utf8,
    });
}

test "DLGINCLUDE wide input code page windows-1252, output code page utf8" {
    const source =
        \\#pragma code_page(1252)
        \\1 DLGINCLUDE L"€𐍈ह\x58bc\200001\777\xff\x80\x81кириллица\400"
    ;
    const expected = "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\x00\x00\x00 \x00\x00\x00\xff\xff\x11\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\xe2\x82\xac\xf0\x90\x8d\x88\xe0\xa4\xb9?\x01?\xff?\x81\xd0\xba\xd0\xb8\xd1\x80\xd0\xb8\xd0\xbb\xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0A\x00";
    try testCompileWithOutputAndOptions(source, expected, .{
        .cwd = std.fs.cwd(),
        .default_code_page = .utf8,
    });
}

test "DLGINCLUDE wide input code page utf8, output code page windows-1252" {
    const source =
        \\#pragma code_page(65001)
        \\1 DLGINCLUDE L"€𐍈ह\x58bc\200001\777\xff\x80\x81кириллица\400"
    ;
    const expected = "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00 \x00\x00\x00\xff\xff\x11\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x80????\x01?\xff?\x81?????????A\x00\x00\x00\x00";
    try testCompileWithOutputAndOptions(source, expected, .{
        .cwd = std.fs.cwd(),
        .default_code_page = .windows1252,
    });
}

test "codepoints in string literals that would be miscompiled by the Win32 RC compiler" {
    try testCompileErrorDetailsWithOptions(
        &.{
            .{ .type = .warning, .str = "codepoint U+FFFE within a string literal would cause the entire file to be miscompiled by the Win32 RC compiler" },
            .{ .type = .note, .str = "the presence of this codepoint causes all non-ASCII codepoints to be byteswapped by the Win32 RC preprocessor" },
        },
        "1 RCDATA { \"\u{FFFE}\" }",
        null,
        .{
            .cwd = std.fs.cwd(),
            .default_code_page = .utf8,
        },
    );
    try testCompileErrorDetailsWithOptions(
        &.{
            .{ .type = .warning, .str = "codepoint U+FFFF within a string literal would cause the entire file to be miscompiled by the Win32 RC compiler" },
            .{ .type = .note, .str = "the presence of this codepoint causes all non-ASCII codepoints to be byteswapped by the Win32 RC preprocessor" },
        },
        "1 RCDATA { \"\u{FFFF}\" }",
        null,
        .{
            .cwd = std.fs.cwd(),
            .default_code_page = .utf8,
        },
    );
    try testCompileErrorDetailsWithOptions(
        &.{
            .{ .type = .warning, .str = "codepoint U+0900 within a string literal would be miscompiled by the Win32 RC compiler (it would get treated as U+0009)" },
            .{ .type = .warning, .str = "codepoint U+0A00 within a string literal would be miscompiled by the Win32 RC compiler (it would get treated as U+000A)" },
            .{ .type = .warning, .str = "codepoint U+0A0D within a string literal would be miscompiled by the Win32 RC compiler (it would get treated as U+000A)" },
            .{ .type = .warning, .str = "codepoint U+0D00 within a string literal would be miscompiled by the Win32 RC compiler (the codepoint would be missing from the compiled resource)" },
            .{ .type = .warning, .str = "codepoint U+2000 within a string literal would be miscompiled by the Win32 RC compiler (it would get treated as U+0020)" },
        },
        "1 RCDATA { \"\u{0900}\u{0A00}\u{0A0D}\u{0D00}\u{2000}\" }",
        null,
        .{
            .cwd = std.fs.cwd(),
            .default_code_page = .utf8,
        },
    );
}

test "strings parsed as wide strings" {
    // The string in the RCDATA is not parsed as a wide string, all the rest of the strings are
    const source =
        \\1 RCDATA { "rcdata\600" }
        \\
        \\STRINGTABLE { 1, "stringtable\600" }
        \\
        \\1 DIALOGEX 1,2,3,4
        \\  CLASS "class\600"
        \\  CAPTION "caption\600"
        \\  FONT 1, "font\600"
        \\{
        \\  CONTROL, "text\600", 1, "controlclass\600", 1, 2, 3, 4, 5, 6
        \\}
        \\
        \\1 MENUEX
        \\BEGIN
        \\  MENUITEM "menuitem\600"
        \\  POPUP "popup\600"
        \\  BEGIN
        \\    MENUITEM ""
        \\  END
        \\END
        \\
        \\1 VERSIONINFO
        \\BEGIN
        \\  VALUE "key\600", "value\600"
        \\  BLOCK "block\600" {}
        \\END
        \\
    ;

    const expected_windows1252 = "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00rcdata\x80\x00\x92\x00\x00\x00 \x00\x00\x00\xff\xff\x05\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00@\x00\xc8\x80\x01\x00\x01\x00\x02\x00\x03\x00\x04\x00\x00\x00c\x00l\x00a\x00s\x00s\x00\xac \x00\x00c\x00a\x00p\x00t\x00i\x00o\x00n\x00\xac \x00\x00\x01\x00\x00\x00\x00\x01f\x00o\x00n\x00t\x00\xac \x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00P\x02\x00\x03\x00\x04\x00\x05\x00\x01\x00\x00\x00c\x00o\x00n\x00t\x00r\x00o\x00l\x00c\x00l\x00a\x00s\x00s\x00\xac \x00\x00t\x00e\x00x\x00t\x00\xac \x00\x00\x00\x00\x00\x00\\\x00\x00\x00 \x00\x00\x00\xff\xff\x04\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00m\x00e\x00n\x00u\x00i\x00t\x00e\x00m\x00\xac \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x81\x00p\x00o\x00p\x00u\x00p\x00\xac \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x90\x00\x00\x00 \x00\x00\x00\xff\xff\x10\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x90\x004\x00\x00\x00V\x00S\x00_\x00V\x00E\x00R\x00S\x00I\x00O\x00N\x00_\x00I\x00N\x00F\x00O\x00\x00\x00\x00\x00\xbd\x04\xef\xfe\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x07\x00\x01\x00k\x00e\x00y\x00\xac \x00\x00v\x00a\x00l\x00u\x00e\x00\xac \x00\x00\x00\x00\x14\x00\x00\x00\x01\x00b\x00l\x00o\x00c\x00k\x00\xac \x00\x008\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00s\x00t\x00r\x00i\x00n\x00g\x00t\x00a\x00b\x00l\x00e\x00\xac \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    try testCompileWithOutputAndOptions(source, expected_windows1252, .{
        .cwd = std.fs.cwd(),
        .default_code_page = .windows1252,
    });

    const expected_utf8 = "\x00\x00\x00\x00 \x00\x00\x00\xff\xff\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00 \x00\x00\x00\xff\xff\n\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00rcdata\xef\xbf\xbd\x00\x00\x00\x92\x00\x00\x00 \x00\x00\x00\xff\xff\x05\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00@\x00\xc8\x80\x01\x00\x01\x00\x02\x00\x03\x00\x04\x00\x00\x00c\x00l\x00a\x00s\x00s\x00\xfd\xff\x00\x00c\x00a\x00p\x00t\x00i\x00o\x00n\x00\xfd\xff\x00\x00\x01\x00\x00\x00\x00\x01f\x00o\x00n\x00t\x00\xfd\xff\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00P\x02\x00\x03\x00\x04\x00\x05\x00\x01\x00\x00\x00c\x00o\x00n\x00t\x00r\x00o\x00l\x00c\x00l\x00a\x00s\x00s\x00\xfd\xff\x00\x00t\x00e\x00x\x00t\x00\xfd\xff\x00\x00\x00\x00\x00\x00\\\x00\x00\x00 \x00\x00\x00\xff\xff\x04\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00m\x00e\x00n\x00u\x00i\x00t\x00e\x00m\x00\xfd\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x81\x00p\x00o\x00p\x00u\x00p\x00\xfd\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x90\x00\x00\x00 \x00\x00\x00\xff\xff\x10\x00\xff\xff\x01\x00\x00\x00\x00\x000\x00\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x90\x004\x00\x00\x00V\x00S\x00_\x00V\x00E\x00R\x00S\x00I\x00O\x00N\x00_\x00I\x00N\x00F\x00O\x00\x00\x00\x00\x00\xbd\x04\xef\xfe\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x07\x00\x01\x00k\x00e\x00y\x00\xfd\xff\x00\x00v\x00a\x00l\x00u\x00e\x00\xfd\xff\x00\x00\x00\x00\x14\x00\x00\x00\x01\x00b\x00l\x00o\x00c\x00k\x00\xfd\xff\x00\x008\x00\x00\x00 \x00\x00\x00\xff\xff\x06\x00\xff\xff\x01\x00\x00\x00\x00\x000\x10\t\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x00s\x00t\x00r\x00i\x00n\x00g\x00t\x00a\x00b\x00l\x00e\x00\xfd\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
    try testCompileWithOutputAndOptions(source, expected_utf8, .{
        .cwd = std.fs.cwd(),
        .default_code_page = .utf8,
    });
}

fn testCompileWithOutput(source: []const u8, expected_output: []const u8, cwd: std.fs.Dir) !void {
    return testCompileWithOutputAndOptions(source, expected_output, .{ .cwd = cwd });
}

fn testCompileWithOutputAndOptions(source: []const u8, expected_output: []const u8, options: TestCompileOptions) !void {
    var buffer = std.ArrayList(u8).init(std.testing.allocator);
    defer buffer.deinit();

    var diagnostics = resinator.errors.Diagnostics.init(std.testing.allocator);
    defer diagnostics.deinit();

    resinator.compile.compile(std.testing.allocator, source, buffer.writer(), .{
        .cwd = options.cwd,
        .diagnostics = &diagnostics,
        .default_code_page = options.default_code_page,
        .ignore_include_env_var = options.ignore_include_env_var,
        .extra_include_paths = options.extra_include_paths,
    }) catch |err| switch (err) {
        error.ParseError, error.CompileError => {
            diagnostics.renderToStdErrDetectTTY(options.cwd, source, null);
            return err;
        },
        else => return err,
    };

    try std.testing.expectEqualSlices(u8, expected_output, buffer.items);
}

const ExpectedErrorDetails = struct {
    str: []const u8,
    type: resinator.errors.ErrorDetails.Type,
};

fn testCompileErrorDetails(expected_details: []const ExpectedErrorDetails, source: []const u8, maybe_expected_output: ?[]const u8) !void {
    return testCompileErrorDetailsWithDir(expected_details, source, maybe_expected_output, std.fs.cwd());
}

fn testCompileErrorDetailsWithDir(expected_details: []const ExpectedErrorDetails, source: []const u8, maybe_expected_output: ?[]const u8, cwd: std.fs.Dir) !void {
    return testCompileErrorDetailsWithOptions(expected_details, source, maybe_expected_output, .{
        .cwd = cwd,
    });
}

const TestCompileOptions = struct {
    cwd: std.fs.Dir,
    default_code_page: resinator.code_pages.CodePage = .windows1252,
    ignore_include_env_var: bool = false,
    extra_include_paths: []const []const u8 = &.{},
};

fn testCompileErrorDetailsWithOptions(expected_details: []const ExpectedErrorDetails, source: []const u8, maybe_expected_output: ?[]const u8, options: TestCompileOptions) !void {
    const allocator = std.testing.allocator;

    var buffer = std.ArrayList(u8).init(std.testing.allocator);
    defer buffer.deinit();

    var diagnostics = resinator.errors.Diagnostics.init(allocator);
    defer diagnostics.deinit();

    const expect_fail = for (expected_details) |details| {
        if (details.type == .err) break true;
    } else false;

    const did_fail = did_fail: {
        resinator.compile.compile(std.testing.allocator, source, buffer.writer(), .{
            .cwd = options.cwd,
            .diagnostics = &diagnostics,
            .default_code_page = options.default_code_page,
            .ignore_include_env_var = options.ignore_include_env_var,
            .extra_include_paths = options.extra_include_paths,
        }) catch |err| switch (err) {
            error.ParseError, error.CompileError => {
                if (!expect_fail) {
                    diagnostics.renderToStdErrDetectTTY(options.cwd, source, null);
                    return err;
                }
                break :did_fail true;
            },
            else => return err,
        };
        break :did_fail false;
    };
    if (did_fail and !expect_fail) {
        std.debug.print("expected compile error, got .res:\n", .{});
        std.testing.expectEqualSlices(u8, "", buffer.items) catch {};
        return error.UnexpectedSuccess;
    }

    if (expected_details.len != diagnostics.errors.items.len) {
        std.debug.print("expected {} error details, got {}:\n", .{ expected_details.len, diagnostics.errors.items.len });
        diagnostics.renderToStdErrDetectTTY(options.cwd, source, null);
        return error.ErrorDetailMismatch;
    }
    for (diagnostics.errors.items, expected_details) |actual, expected| {
        std.testing.expectEqual(expected.type, actual.type) catch |e| {
            diagnostics.renderToStdErrDetectTTY(options.cwd, source, null);
            return e;
        };
        var buf: [256]u8 = undefined;
        var fbs = std.io.fixedBufferStream(&buf);
        try actual.render(fbs.writer(), source, diagnostics.strings.items);
        try std.testing.expectEqualStrings(expected.str, fbs.getWritten());
    }

    if (maybe_expected_output) |expected_output| {
        try std.testing.expectEqualSlices(u8, expected_output, buffer.items);
    }
}
